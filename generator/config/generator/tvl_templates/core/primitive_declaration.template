{% set ns = namespace(
   contains_template_parameter=False,
   contains_parameter_pack=False,
   parameter_pack_typenames_str='',
   full_qualified_parameters_str='',
   parameters_str='',
   additional_template_type_name='',
   additional_template_name=''
   ) %}
{% for param in parameters %}
   {% if not loop.last %}
      {% set comma = ',' %}
   {% else %}
      {% set comma = '' %}
   {% endif %}
   {% if param['is_parameter_pack'] %}
      {% set ns.contains_parameter_pack = True %}
      {% set ns.parameter_pack_typenames_str = ns.parameter_pack_typenames_str ~ 'typename... ' ~ param['ctype'] ~ comma %}
      {% set ns.full_qualified_parameters_str = ns.full_qualified_parameters_str ~ param['ctype'] ~ '... ' ~ param['name'] ~ comma %}
      {% set ns.parameters_str = ns.parameters_str ~ param['name'] ~ '...' ~ comma %}
   {% else %}
      {% if param['default_value'] == "" %}
      {% set dv = '' %}
      {% else %}
      {% set dv = '=' ~ param['default_value'] %}
      {% endif %}
      {% if param['declaration_attributes'] == "" %}
      {% set decl_attribs = ' ' %}
      {% else %}
      {% set decl_attribs = ' ' ~ param['declaration_attributes'] ~ ' ' %}
      {% endif %}
      {% if param['attributes'] == "" %}
      {% set attribs = ' ' %}
      {% else %}
      {% set attribs = ' ' ~ param['attributes'] ~ ' ' %}
      {% endif %}
      {% set ns.full_qualified_parameters_str = ns.full_qualified_parameters_str ~ decl_attribs ~ param['ctype'] ~ attribs ~ param['name'] ~ dv ~ comma %}
      {% set ns.parameters_str = ns.parameters_str ~ param['name'] ~ comma %}
   {% endif %}
{% endfor %}
{% if ns.contains_parameter_pack %}
{% set ns.parameter_pack_typenames_str = ', ' ~ ns.parameter_pack_typenames_str %}
{% endif %}
{% if additional_simd_template_parameter != "" %}
{% set ns.additional_template_type_name = 'typename ' ~ additional_simd_template_parameter ~ ', ' %}
{% set ns.additional_template_name = additional_simd_template_parameter ~ ', '%}
{% endif %}
{% if additional_non_specialized_template_parameters|length > 0 %}
{% set rtp_ns = namespace(types='', params='') %}
{% set types_joiner = joiner(",") %}
{% set params_joiner = joiner(",") %}
{% for parameter_dict in additional_non_specialized_template_parameters %}
{% set rtp_ns.types = rtp_ns.types ~ types_joiner() ~ parameter_dict["ctype"] ~ ' ' ~ parameter_dict["name"] %}
{% set rtp_ns.params = rtp_ns.params ~ params_joiner() ~ parameter_dict["name"] %}
{% endfor %}
{% set ns.additional_template_type_name = ns.additional_template_type_name ~ rtp_ns.types ~ ", "%}
{% set ns.additional_template_name = ns.additional_template_name ~ rtp_ns.params ~ ", "%}
{% endif %}

{# Every implementation is in the (nested) namespace "functors" #}
namespace {{ tvl_implementation_namespace }} {
{# This is the forward declaration of the actual primitive implementation struct #}
      // Definition of a preprocessor variable to detect overload ambiguity.
      #define {{ tvl_namespace|upper ~ '_' ~ tvl_implementation_namespace|upper ~ '_' ~ functor_name|upper ~ '_STRUCT_DEFINED'}}
      // Forward declaration of implementation struct for TVL-primitive "{{ functor_name }}".
      template<VectorProcessingStyle {{ vector_name }}, {{ ns.additional_template_type_name}}ImplementationDegreeOfFreedom {{ idof_name }}>
         struct {{ functor_name }}{};
   }
{{ tvl_function_doxygen }}
   {# This is the templated free function for the primitive which is called by the user of TVL. #}
   template<
      VectorProcessingStyle {{ vector_name }}
      , {{ ns.additional_template_type_name}}ImplementationDegreeOfFreedom {{ idof_name }} = workaround{{ ns.parameter_pack_typenames_str }}
      {% if functor_name != primitive_name %}
      #ifdef {{ tvl_namespace|upper ~ '_' ~ tvl_implementation_namespace|upper ~ '_' ~ primitive_name|upper ~ '_STRUCT_DEFINED'}}
      , typename std::enable_if_t<
         !std::is_same_v<
            typename {{ tvl_implementation_namespace }}::{{ primitive_name }}<{{ vector_name }}, {{ ns.additional_template_name }}{{ idof_name }}>::param_tuple_t,
            typename {{ tvl_implementation_namespace }}::{{ functor_name }}<{{ vector_name }}, {{ ns.additional_template_name }}{{ idof_name }}>::param_tuple_t>,
         std::nullptr_t
    > = nullptr
      #endif
      {% endif %}
   >
   {# If the primitive returns something, the caller has to capture the result. #}
      {{ '[[nodiscard]] ' if returns['ctype'] != 'void' else '' }}{# If force_inline is set to True, we use TVL_FORCE_INLINE. #}{{ 'TVL_FORCE_INLINE ' if force_inline else '' }}{{ returns['ctype'] }} {{ primitive_name }}(
         {{ ns.full_qualified_parameters_str }}
      ) {
      {# If the function primitive implementation returns something we have to return it, otherwise we just call it. #}
      {# Call the actual implementation with all parameters. #}
         {{ 'return ' if returns['ctype'] != 'void' else '' }}{{ tvl_implementation_namespace }}::{{ functor_name }}<{{ vector_name }}, {{ ns.additional_template_name }}{{ idof_name }}>::apply(
            {{ ns.parameters_str }}
         );
      }
